/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import lb.strategies.RoundRobin;

import static org.junit.jupiter.api.Assertions.assertEquals;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Optional;

class LoadBalancerTest {

    private Reader reader;

    void ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = LoadBalancerTest.class.getResource("tests/" + testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
    }

    @AfterEach
    void CloseReader() throws IOException {
        if (reader != null) {
            reader.close();
        }
    }

    @Test
    void getnext_roundrobinempty_empty() throws URISyntaxException, IOException {

        // Arrange
        var lbs = new RoundRobin(new ArrayList<>());
        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.empty(), next, "should be empty");
    }

    @Test
    void getnext_roundrobin1nothealthy_foundempty() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        var lbs = new RoundRobin(list);
        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.empty(), next, "should be empty because not healthy");
    }

    @Test
    void getnext_roundrobin1healthy_found0() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-0"), next, "should be be-0");
    }

    @Test
    void getnext_roundrobin1healthy2_found0() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        lbs.getNext();

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-0"), next, "should be be-0 again - only 1");
    }

    @Test
    void getnext_roundrobin2healthy2_found1() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        list.add("be-1");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        lbs.healthy("be-1");
        lbs.getNext();

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-1"), next, "should be be-1 again - have 2");
    }

    @Test
    void getnext_roundrobin2healthy1_found1() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        list.add("be-1");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-1");
        lbs.getNext();

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-1"), next, "should be be-1 again - only 1");
    }

    @Test
    void getnext_roundrobin2healthybutlaterunhealthy_found1() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        list.add("be-1");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        lbs.healthy("be-1");
        lbs.getNext(); // must be be-0
        lbs.unhealthy("be-0"); // remove be-0

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-1"), next, "should be be-1 again - only 1");
    }

    @Test
    void getnext_roundrobin2healthybutlaterunhealthyofnext_found0() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        list.add("be-1");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        lbs.healthy("be-1");
        lbs.getNext(); // must be be-0
        lbs.unhealthy("be-1"); // remove be-0

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-0"), next, "should be be-0 again - 1 unhealthy");
    }

    @Test
    void getnext_roundrobin2healthybutlaterallunhealthy_found0() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("http://localhost:9000");
        list.add("http://localhost:9001");
        var lbs = new RoundRobin(list);

        // Act
        lbs.tryHealthCheck("http://localhost:9000");
        var next = lbs.getNext();

        // Assert
        //assertEquals(Optional.of("http://localhost:9000"), next, "9000 first");
        assertEquals(Optional.empty(), next, "9000 first");
    }

    @Test
    void getnext4times_roundrobin3healthy3_found1() throws URISyntaxException, IOException {

        // Arrange
        var list = new ArrayList<String>();
        list.add("be-0");
        list.add("be-1");
        list.add("be-2");
        var lbs = new RoundRobin(list);
        lbs.healthy("be-0");
        lbs.healthy("be-1");
        lbs.healthy("be-2");
        lbs.getNext();
        lbs.getNext();
        lbs.getNext();

        // Act
        var next = lbs.getNext();

        // Assert
        assertEquals(Optional.of("be-0"), next, "should be be-0 again - have 3 after 4");
    }
}
